
#define TdsSensorPin A0
#define VREF 5.0              // analog reference voltage(Volt) of the ADC
#define SCOUNT  5            // sum of sample point
#define CENTER 522

unsigned long int avgValue;  //Store the average value of the sensor feedback
float b;
int buf[10],temp;
int analogBuffer[SCOUNT];     // store the analog value in the array, read from ADC
int analogBufferTemp[SCOUNT];
int analogBufferIndex = 0;
int copyIndex = 0;

float averageVoltage = 0;
float tdsValue = 0;
float temperature = 16;       // current temperature for compensation

// median filtering algorithm
int getMedianNum(int bArray[], int iFilterLen){
  int bTab[iFilterLen];
  for (byte i = 0; i<iFilterLen; i++)
  bTab[i] = bArray[i];
  int i, j, bTemp;
  for (j = 0; j < iFilterLen - 1; j++) {
    for (i = 0; i < iFilterLen - j - 1; i++) {
      if (bTab[i] > bTab[i + 1]) {
        bTemp = bTab[i];
        bTab[i] = bTab[i + 1];
        bTab[i + 1] = bTemp;
      }
    }
  }
  if ((iFilterLen & 1) > 0){
    bTemp = bTab[(iFilterLen - 1) / 2];
  }
  else {
    bTemp = (bTab[iFilterLen / 2] + bTab[iFilterLen / 2 - 1]) / 2;
  }
  return bTemp;
}
  
#define DST_IP "finalyearprojectsmartwaterpurifier.000webhostapp.com" 

String str;
String PH="";
String TDS="";

 void setup()
{  

      Serial.begin(115200);
   
      pinMode(TdsSensorPin,INPUT);
     
      
 }

void loop()
{
  delay(100);
  tds();
  delay(100);
  ph();
  delay(100);
  Serial.println("AT");
  delay (100);  
  delay (100);
  delay (100);
  Serial.println("AT+CIPMUX=1");
  ph();
  delay(100); 
  delay(100); 
  delay(100); 
  delay(100); 
  delay(100); 
  delay(100); 
  delay(100); 
  delay(100); 
  delay(100); 
  ph();
  //Open a connection to the web server
  String cmdU = "AT+CIPSTART=0,\"TCP\",\""; //make this command: AT+CPISTART="TCP","192.168.88.35",80
  cmdU += DST_IP;
  cmdU += "\",80\r\n";
  Serial.println(cmdU);
 
  delay(100); 
  delay(100); 
  delay(100); 
  delay(100); 
  delay(100); 
  delay(100); 
  delay(100);
  ph(); 
  String  cmdU2  = "GET /update.php?PH=";
      cmdU2  +=PH;
      cmdU2  +="&TDS=";
      cmdU2  +=TDS;     

       Serial.print("AT+CIPSEND=0,");
      
      Serial.println((cmdU2.length())); 
        
  }

  delay(100); 
  delay(100); 
  delay(100); 
  delay(100); 
  delay(100); 
  delay(100); 
  delay(100); 
  Serial.println("AT+CIPCLOSE");
   
  delay(100); 
  delay(100); 
  delay(100); 
  delay(100); 
  delay(100); 
  delay(100); 
  
}



// void  tds()
// {
//   static unsigned long analogSampleTimepoint = millis();
//   if(millis()-analogSampleTimepoint > 40U)
//   {     //every 40 milliseconds,read the analog value from the ADC
//     analogSampleTimepoint = millis();
//     analogBuffer[analogBufferIndex] = analogRead(A0);    //read the analog value and store into the buffer
//     analogBufferIndex++;
//     if(analogBufferIndex == SCOUNT)
//     { 
//       analogBufferIndex = 0;
//     }
//   }   
  
//   static unsigned long printTimepoint = millis();
//   if(millis()-printTimepoint > 800U){
//     printTimepoint = millis();
//     for(copyIndex=0; copyIndex<SCOUNT; copyIndex++){
//       analogBufferTemp[copyIndex] = analogBuffer[copyIndex];
      
//       // read the analog value more stable by the median filtering algorithm, and convert to voltage value
//       averageVoltage = getMedianNum(analogBufferTemp,SCOUNT) * (float)VREF / 1024.0;
      
//       //temperature compensation formula: fFinalResult(25^C) = fFinalResult(current)/(1.0+0.02*(fTP-25.0)); 
//       float compensationCoefficient = 1.0+0.02*(temperature-25.0);
//       //temperature compensation
//       float compensationVoltage=averageVoltage/compensationCoefficient;
      
//       //convert voltage value to tds value
//       tdsValue=(133.42*compensationVoltage*compensationVoltage*compensationVoltage - 255.86*compensationVoltage*compensationVoltage + 857.39*compensationVoltage)*0.5;
      
//       //Serial.print("voltage:");
//       //Serial.print(averageVoltage,2);
//       //Serial.print("V   ");
//       Serial.print("TDS Value:");
//       Serial.print(tdsValue,0);
//       Serial.println("ppm");
//        TDS=tdsValue;
//     }
//   }
      
     
      

// }

void  tds()
{
  
    analogBuffer[analogBufferIndex] = analogRead(A0);    //read the analog value and store into the buffer
    analogBufferIndex++;
    if(analogBufferIndex == SCOUNT)
    { 
      analogBufferIndex = 0;
    } 
  
    for(copyIndex=0; copyIndex<SCOUNT; copyIndex++)
    {
      analogBufferTemp[copyIndex] = analogBuffer[copyIndex];
      
      // read the analog value more stable by the median filtering algorithm, and convert to voltage value
      averageVoltage = getMedianNum(analogBufferTemp,SCOUNT) * (float)VREF / 1024.0;
      
      //temperature compensation formula: fFinalResult(25^C) = fFinalResult(current)/(1.0+0.02*(fTP-25.0)); 
      float compensationCoefficient = 1.0+0.02*(temperature-25.0);
      //temperature compensation
      float compensationVoltage=averageVoltage/compensationCoefficient;
      
      //convert voltage value to tds value
      tdsValue=(133.42*compensationVoltage*compensationVoltage*compensationVoltage - 255.86*compensationVoltage*compensationVoltage + 857.39*compensationVoltage)*0.5;
      
    }
      Serial.print("TDS Value:");
      Serial.print(tdsValue,0);
      Serial.println("ppm");
       TDS=tdsValue;
  }
      
     
      




void ph()
{
  for(int i=0;i<10;i++)       //Get 10 sample value from the sensor for smooth the value
  { 
    buf[i]=analogRead(A5);
    delay(10);
  }
  for(int i=0;i<9;i++)        //sort the analog from small to large
  {
    for(int j=i+1;j<10;j++)
    {
      if(buf[i]>buf[j])
      {
        temp=buf[i];
        buf[i]=buf[j];
        buf[j]=temp;
      }
    }
  }
  avgValue=0;
  for(int i=2;i<8;i++)                      //take the average value of 6 center sample
   avgValue+=buf[i];

  float voltage=((float)avgValue/6)*(5.0/1024); //convert the analog into millivolt
  //phValue=3.5*phValue;                      //convert the millivolt into pH value
  float phValue = voltage * (-1.33) + 7.0;
  Serial.print("PH:");  
  Serial.print(phValue,2);
  Serial.println(" ");
  PH=phValue;
 
}

 

